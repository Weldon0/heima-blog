import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.88f692a7.js";const t={},o=p(`<ol><li><p>\u533A\u522B</p><ul><li><p>\u5C55\u793A\u5F62\u5F0F\u4E0D\u540C v-if\u662F \u521B\u5EFA\u4E00\u4E2Adom\u8282\u70B9 V-show \u662Fdisplay:none / block</p></li><li><p>\u4F7F\u7528\u573A\u666F\u4E0D\u540C \u521D\u6B21\u52A0\u8F7Dv-if\u8981\u6BD4v-show\u597D\uFF0C\u9875\u9762\u4E0D\u4F1A\u505A\u52A0\u8F7D\u76D2\u5B50 \u9891\u7E41\u5207\u6362v-show\u8981\u6BD4v-if\u597D\uFF0C\u521B\u5EFA\u548C\u5220\u9664\u7684\u5F00\u9500\u592A\u5927\u4E86\uFF0C\u663E\u793A\u548C\u9690\u85CF\u5F00\u9500\u8F83\u5C0F</p></li></ul></li><li><p>\u4F18\u5148\u7EA7\u95EE\u9898</p><p>\u6E90\u7801\u4E2D\u4F53\u73B0 &gt;&gt; v-for \u6BD4 if \u6BD4\u8F83\u9AD8</p></li><li><p>\u4E00\u8D77\u4F7F\u7528</p><ol><li>\u62A5\u9519</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token number">4</span><span class="token operator">:</span><span class="token number">11</span>  error  The <span class="token string">&#39;arr&#39;</span> variable inside <span class="token string">&#39;v-for&#39;</span> directive should be replaced <span class="token keyword">with</span> a computed property that returns filtered array instead<span class="token punctuation">.</span> You should not mix <span class="token string">&#39;v-for&#39;</span> <span class="token keyword">with</span> <span class="token string">&#39;v-if&#39;</span>  vue<span class="token operator">/</span>no<span class="token operator">-</span>use<span class="token operator">-</span>v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>v<span class="token operator">-</span><span class="token keyword">for</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>\u5F71\u54CD\u6027\u80FD</p><p>v-if\u6761\u4EF6\u4E0D\u6EE1\u8DB3 &gt;&gt; \u4E5F\u4F1A\u6267\u884C\u904D\u5386 &gt;&gt; \u6027\u80FD\u5DEE</p></li><li><p>\u600E\u4E48\u89E3\u51B3</p><p>v-if\u6DFB\u52A0\u5230\u5916\u5C42\u76D2\u5B50\uFF0C\u4E0D\u6EE1\u8DB3\u6761\u4EF6 &gt;&gt; \u4E0D\u6267\u884C\u6E32\u67D3</p></li></ol></li></ol><details class="custom-container details"><summary>\u6E90\u7801</summary><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">genElement</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span>pre <span class="token operator">=</span> el<span class="token punctuation">.</span>pre <span class="token operator">||</span> el<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>staticRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>staticProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">genStatic</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>once <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>onceProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">genOnce</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>for <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>forProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">genFor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>ifProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">genIf</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotTarget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;void 0&#39;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">genSlot</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// component or element</span>
      <span class="token keyword">var</span> code<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        code <span class="token operator">=</span> <span class="token function">genComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">,</span> el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> data<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">.</span>plain <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>pre <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span><span class="token function">maybeComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          data <span class="token operator">=</span> <span class="token function">genData$2</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">var</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>inlineTemplate <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        code <span class="token operator">=</span> <span class="token string">&quot;_c(&#39;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>data <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>children <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> children<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// module transforms</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        code <span class="token operator">=</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> code
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),e=[o];function c(l,i){return s(),a("div",null,e)}var k=n(t,[["render",c],["__file","\u4E09\u3001v-if&v-show.html.vue"]]);export{k as default};
